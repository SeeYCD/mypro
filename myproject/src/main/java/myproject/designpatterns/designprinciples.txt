设计模式原则
1.总原则：开闭原则
	简单说：一开一闭，开放拓展，关闭修改；
	我们需要修改某一方法的功能时，不能直接改动原来的方法，而是拓展代码，实现热拔插的效果；
	要有这样的效果吗，需要采用接口和抽象类；
2.单一职责
	不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分
3.里氏替换原则LISKOV SUBSTITUTION PRINCIPLE
	里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现
4.依赖倒转原则
	面向接口编程，依赖于抽象而不依赖于具体
5.接口隔离原则
	每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分
6.迪米特法则（最少知道原则）
	一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。
	这样当被依赖的类变化时，才能最小的影响该类。
7.合成复用原则
	原则是尽量首先使用合成/聚合的方式，而不是使用继承